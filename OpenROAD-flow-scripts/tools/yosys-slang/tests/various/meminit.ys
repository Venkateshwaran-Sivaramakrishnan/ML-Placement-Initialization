design -reset
read_slang --no-implicit-memories <<EOF
module top();
	(* rom_block *)
	reg [3:0] x[1:0];
	reg [3:0] y[1:0];

	initial begin
		x <= '{7, 1};
		y <= '{7, 1};
	end

	always_comb
		assert(x[0] === y[0] && x[1] === y[1]);
endmodule
EOF

chformal -lower
memory_collect
select -assert-count 1 t:$mem_v2
memory_map
sat -verify -enable_undef -prove-asserts

design -reset
read_slang --no-implicit-memories <<EOF
module top();
	(* rom_block *)
	reg [3:0] x[0:1];
	reg [3:0] y[0:1];

	initial begin
		x <= '{7, 1};
		y <= '{7, 1};
	end

	always_comb
		assert(x[0] === y[0] && x[1] === y[1]);
endmodule
EOF

chformal -lower
memory_collect
select -assert-count 1 t:$mem_v2
memory_map
sat -verify -enable_undef -prove-asserts

design -reset
read_slang --no-implicit-memories <<EOF
module top();
	(* rom_block *)
	reg [3:0] x[1:2];
	reg [3:0] y[1:2];

	initial begin
		x <= '{7, 1};
		y <= '{7, 1};
	end

	always_comb
		assert(x[1] === y[1] && x[2] === y[2]);
endmodule
EOF
chformal -lower
memory_collect
select -assert-count 1 t:$mem_v2
memory_map
sat -verify -enable_undef -prove-asserts

design -reset
read_slang --no-implicit-memories <<EOF
module top();
	(* rom_block *)
	reg [3:0] x[2:1];
	reg [3:0] y[2:1];

	initial begin
		x <= '{7, 1};
		y <= '{7, 1};
	end

	always_comb
		assert(x[1] === y[1] && x[2] === y[2]);
endmodule
EOF
chformal -lower
memory_collect
select -assert-count 1 t:$mem_v2
memory_map
sat -verify -enable_undef -prove-asserts

design -reset
read_slang --no-implicit-memories <<EOF
module top();
	(* rom_block *)
	reg [3:0] x[0:-1];
	reg [3:0] y[0:-1];

	initial begin
		x <= '{7, 1};
		y <= '{7, 1};
	end

	always_comb
		assert(x[0] === y[0] && x[-1] === y[-1]);
endmodule
EOF
dump
chformal -lower
memory_collect
select -assert-count 1 t:$mem_v2
memory_map
sat -verify -enable_undef -prove-asserts
