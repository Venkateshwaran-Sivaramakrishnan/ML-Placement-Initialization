
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)

-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ../../../partitions/aes_cipher_top.output289.Y.sv
Parsing SystemVerilog input from `../../../partitions/aes_cipher_top.output289.Y.sv' to AST representation.
Generating RTLIL representation for module `\miter'.
Generating RTLIL representation for module `\miter_cmp_prop'.
Generating RTLIL representation for module `\miter_def_prop'.
Generating RTLIL representation for module `\gold.aes_cipher_top.output289.Y'.
Generating RTLIL representation for module `\gate.aes_cipher_top.output289.Y'.
Successfully finished Verilog frontend.

2. Executing RTLIL frontend.
Input filename: ../../../partitions/aes_cipher_top.output289.Y.il
Replacing existing blackbox module \gate.aes_cipher_top.output289.Y.
Replacing existing blackbox module \gold.aes_cipher_top.output289.Y.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \miter
Used module:     \miter_cmp_prop
Used module:     \gate.aes_cipher_top.output289.Y
Used module:     \gold.aes_cipher_top.output289.Y
Parameter 1 (\WIDTH) = 1
Parameter 2 (\TYPE) = 48'011000010111001101110011011001010111001001110100

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\miter_cmp_prop'.
Parameter 1 (\WIDTH) = 1
Parameter 2 (\TYPE) = 48'011000010111001101110011011001010111001001110100
Generating RTLIL representation for module `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop'.

3.3. Analyzing design hierarchy..
Top module:  \miter
Used module:     $paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop
Used module:     \gate.aes_cipher_top.output289.Y
Used module:     \gold.aes_cipher_top.output289.Y

3.4. Analyzing design hierarchy..
Top module:  \miter
Used module:     $paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop
Used module:     \gate.aes_cipher_top.output289.Y
Used module:     \gold.aes_cipher_top.output289.Y
Removing unused module `\miter_def_prop'.
Removing unused module `\miter_cmp_prop'.
Removed 2 unused modules.
Module $paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop directly or indirectly contains formal properties -> setting "keep" attribute.
Module miter directly or indirectly contains formal properties -> setting "keep" attribute.
Mapping positional arguments of cell miter.__po_output289.Y__assert ($paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop).

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 3 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.$proc$../../../partitions/aes_cipher_top.output289.Y.sv:58$25251'.
Creating decoders for process `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.$proc$../../../partitions/aes_cipher_top.output289.Y.sv:52$25246'.

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.\okay' from process `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.$proc$../../../partitions/aes_cipher_top.output289.Y.sv:52$25246'.
No latch inferred for signal `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.\i' from process `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.$proc$../../../partitions/aes_cipher_top.output289.Y.sv:52$25246'.

4.9. Executing PROC_DFF pass (convert process syncs to FFs).

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.$proc$../../../partitions/aes_cipher_top.output289.Y.sv:58$25251'.
Removing empty process `$paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.$proc$../../../partitions/aes_cipher_top.output289.Y.sv:52$25246'.
Cleaned up 0 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gate.aes_cipher_top.output289.Y.
Optimizing module $paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.
<suppressed ~1 debug messages>
Optimizing module gold.aes_cipher_top.output289.Y.
Optimizing module miter.

5. Executing ASYNC2SYNC pass.

6. Executing FORMALFF pass.

7. Executing SETUNDEF pass (replace undef values with defined constants).

8. Executing FLATTEN pass (flatten design).
Deleting now unused module gate.aes_cipher_top.output289.Y.
Deleting now unused module $paramod$7c68cd0f50b67350b96c971f2e7bf39c83376225\miter_cmp_prop.
Deleting now unused module gold.aes_cipher_top.output289.Y.
<suppressed ~3 debug messages>

9. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module miter.
<suppressed ~1 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \miter..
Removed 1 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

12. Executing SAT pass (solving SAT problems in the circuit).

Setting up time step 1:
Final constraint equation: { } = { }
Import def constraint for this timestep: \__pi_output289.A
Imported 7 cells to SAT database.
Import proof for assert: \__po_output289.Y__assert.okay when 1'1.

** Trying induction with length 1 **

Setting up time step 1:
Final constraint equation: { } = { }
Import def constraint for this timestep: \__pi_output289.A
Imported 7 cells to SAT database.
No constraints for initial state found.

Import proof for assert: \__po_output289.Y__assert.okay when 1'1.
Import show expression: \__pi_output289.A
Import show expression: \__po_output289.Y__assert.i
Import show expression: \__po_output289.Y__assert.in_gate
Import show expression: \__po_output289.Y__assert.in_gold
Import show expression: \__po_output289.Y__assert.okay
Import show expression: \__po_output289.Y__gate
Import show expression: \__po_output289.Y__gold
Import show expression: \gate.__pi_output289.A
Import show expression: \gate.__po_output289.Y
Import show expression: \gate.output289.A
Import show expression: \gate.output289.Y
Import show expression: \gold.__pi_output289.A
Import show expression: \gold.__po_output289.Y
Import show expression: \gold.output289.A
Import show expression: \gold.output289.Y

[base case 1] Solving problem with 54 variables and 136 clauses..
Base case for induction length 1 proven.

Setting up time step 2:
Final constraint equation: { } = { }
Import def constraint for this timestep: \__pi_output289.A
Imported 7 cells to SAT database.
Import proof for assert: \__po_output289.Y__assert.okay when 1'1.
Import show expression: \__pi_output289.A
Import show expression: \__po_output289.Y__assert.i
Import show expression: \__po_output289.Y__assert.in_gate
Import show expression: \__po_output289.Y__assert.in_gold
Import show expression: \__po_output289.Y__assert.okay
Import show expression: \__po_output289.Y__gate
Import show expression: \__po_output289.Y__gold
Import show expression: \gate.__pi_output289.A
Import show expression: \gate.__po_output289.Y
Import show expression: \gate.output289.A
Import show expression: \gate.output289.Y
Import show expression: \gold.__pi_output289.A
Import show expression: \gold.__po_output289.Y
Import show expression: \gold.output289.A
Import show expression: \gold.output289.Y

[induction step 1] Solving problem with 106 variables and 272 clauses..
Induction step proven: SUCCESS!

                  /$$$$$$      /$$$$$$$$     /$$$$$$$    
                 /$$__  $$    | $$_____/    | $$__  $$   
                | $$  \ $$    | $$          | $$  \ $$   
                | $$  | $$    | $$$$$       | $$  | $$   
                | $$  | $$    | $$__/       | $$  | $$   
                | $$/$$ $$    | $$          | $$  | $$   
                |  $$$$$$/ /$$| $$$$$$$$ /$$| $$$$$$$//$$
                 \____ $$$|__/|________/|__/|_______/|__/
                       \__/                              

End of script. Logfile hash: d4438c94b4, CPU: user 0.03s system 0.01s, MEM: 13.25 MB peak
Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3)
Time spent: 31% 2x opt_expr (0 sec), 21% 1x sat (0 sec), ...
